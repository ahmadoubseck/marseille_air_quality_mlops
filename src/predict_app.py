"""
import streamlit as st
import pandas as pd
import joblib

st.title("Pr√©dictions AQI - Marseille")

model = joblib.load("models/aqi_model.pkl")
df = pd.read_csv("data/features_history.csv")
X = df.drop(columns=["aqi", "timestamp"])
prediction = model.predict(X)

st.write("Pr√©diction AQI actuelle : ", prediction[0])
st.write(df)
"""

import streamlit as st
import pandas as pd
import joblib
# Le module 'os' a √©t√© retir√© ici, comme demand√©, mais cela peut r√©introduire FileNotFoundError sur Streamlit Cloud.
# Pour une solution robuste, r√©f√©rez-vous √† la version pr√©c√©dente qui utilisait 'os.path'.

st.set_page_config(layout="centered", page_title="Pr√©dictions AQI Marseille", page_icon="üçÉ")

st.title("‚òÄÔ∏è Pr√©dictions AQI - Marseille")

# Description de l'application
st.markdown(
    """
    Bienvenue sur l'application de pr√©diction de la qualit√© de l'air (AQI) pour Marseille.
    Cette application utilise un mod√®le d'apprentissage automatique pour pr√©voir l'indice de qualit√© de l'air.
    """
)

# --- Chargement des ressources (revert√© √† l'original, ce qui risque de causer une FileNotFoundError) ---
# ATTENTION: Les chemins ci-dessous sont relatifs et peuvent √©chouer sur Streamlit Cloud si les fichiers
# ne sont pas √† la racine de l'ex√©cution ou s'ils ne sont pas pouss√©s sur GitHub.
# Si vous rencontrez "FileNotFoundError", veuillez utiliser la m√©thode 'os.path' de la version pr√©c√©dente
# pour rendre les chemins robustes.
try:
    model = joblib.load("models/aqi_model.pkl")
    # st.success("Mod√®le charg√© (chemin d'origine)") # Ce message n'est pas affich√© pour garder l'interface propre
except FileNotFoundError:
    st.error("‚ùå Erreur: Le fichier mod√®le 'models/aqi_model.pkl' n'a pas √©t√© trouv√©. Assurez-vous qu'il est bien pr√©sent dans votre d√©p√¥t GitHub et que le chemin est correct.")
    st.info("üí° **Solution possible:** Si vous voyez cette erreur sur Streamlit Cloud, vos fichiers ne sont peut-√™tre pas pouss√©s sur GitHub ou le chemin relatif est incorrect. R√©f√©rez-vous aux √©tapes pr√©c√©dentes pour le `.gitignore` et les chemins absolus (`os.path`).")
    st.stop() # Arr√™te l'ex√©cution de l'application si le mod√®le n'est pas trouv√©
except Exception as e:
    st.error(f"‚ùå Une erreur inattendue est survenue lors du chargement du mod√®le : {e}")
    st.stop()

try:
    df = pd.read_csv("data/features_history.csv")
    # st.success("Donn√©es charg√©es (chemin d'origine)") # Ce message n'est pas affich√© pour garder l'interface propre
except FileNotFoundError:
    st.error("‚ùå Erreur: Le fichier de donn√©es 'data/features_history.csv' n'a pas √©t√© trouv√©. Assurez-vous qu'il est bien pr√©sent dans votre d√©p√¥t GitHub et que le chemin est correct.")
    st.info("üí° **Solution possible:** Similaire au mod√®le, v√©rifiez que le fichier de donn√©es est bien pouss√© et que son chemin est correct.")
    st.stop()
except Exception as e:
    st.error(f"‚ùå Une erreur inattendue est survenue lors du chargement des donn√©es : {e}")
    st.stop()
# --- Fin du chargement des ressources (revert√©) ---

# --- Pr√©diction initiale et affichage (bas√© sur les donn√©es historiques) ---
st.header("üìä Donn√©es Historiques et Pr√©diction Initiale")

if not df.empty and "aqi" in df.columns and "timestamp" in df.columns:
    X_historical = df.drop(columns=["aqi", "timestamp"])
    try:
        prediction_historical = model.predict(X_historical)
        st.write("---")
        st.markdown(f"### üìà Pr√©diction AQI bas√©e sur les donn√©es historiques :")
        st.markdown(f"<h1 style='text-align: center; color: #4CAF50;'>{prediction_historical[0]:.2f}</h1>", unsafe_allow_html=True)
        st.write("Cet indice repr√©sente la qualit√© de l'air pour la p√©riode la plus r√©cente dans les donn√©es historiques.")
        st.write("---")
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la pr√©diction avec les donn√©es historiques : {e}")
else:
    st.warning("‚ö†Ô∏è Le fichier de donn√©es historiques est vide ou ne contient pas les colonnes attendues ('aqi', 'timestamp'). Impossible de faire la pr√©diction historique.")

st.subheader("Visualisation des Donn√©es Historiques")
st.dataframe(df) # Utilisation de st.dataframe pour un affichage interactif

# --- Am√©lioration du front : Section de pr√©diction interactive ---
st.markdown("---") # S√©parateur visuel
st.header("‚ú® Faire une Nouvelle Pr√©diction AQI (Simulation)")
st.write("Utilisez le panneau lat√©ral pour ajuster les param√®tres environnementaux et simuler une pr√©diction de la qualit√© de l'air.")

# Sidebars pour les inputs utilisateur
st.sidebar.header("üéöÔ∏è Param√®tres pour la Simulation")
st.sidebar.info("**Note:** Les noms et le nombre de ces param√®tres (`temp√©rature`, `humidit√©`, etc.) *doivent correspondre* exactement aux caract√©ristiques que votre mod√®le (`aqi_model.pkl`) a appris √† partir de vos donn√©es d'entra√Ænement. Ajustez-les si n√©cessaire.")

# Input fields for new prediction - exemples bas√©s sur des features communes
# Ajustez ces sliders pour qu'ils correspondent aux caract√©ristiques r√©elles de votre mod√®le
temp_input = st.sidebar.slider("Temp√©rature (¬∞C)", min_value=-20.0, max_value=50.0, value=15.0, step=0.1)
humidity_input = st.sidebar.slider("Humidit√© (%)", min_value=0, max_value=100, value=70, step=1)
wind_speed_input = st.sidebar.slider("Vitesse du Vent (km/h)", min_value=0.0, max_value=100.0, value=10.0, step=0.1)
# Si votre mod√®le utilise d'autres caract√©ristiques (ex: niveaux de polluants sp√©cifiques), ajoutez-les ici.
# Exemple:
pm25_input = st.sidebar.slider("Niveau de PM2.5 (¬µg/m¬≥)", min_value=0.0, max_value=200.0, value=30.0, step=1.0)
# Ajoutez d'autres sliders ou entr√©es num√©riques si votre mod√®le utilise plus de caract√©ristiques

# Cr√©er un DataFrame pour l'entr√©e utilisateur
# IMPORTANT: Les noms de colonnes doivent ABSOLUMENT correspondre aux noms des caract√©ristiques
# que votre mod√®le attend. Modifiez 'temperature', 'humidity', 'wind_speed', 'pm25_level'
# pour qu'ils correspondent √† vos noms de caract√©ristiques r√©els.
user_input_data = {
    'temperature': [temp_input],
    'humidity': [humidity_input],
    'wind_speed': [wind_speed_input],
    'pm25_level': [pm25_input] # Assurez-vous que ce nom correspond √† une caract√©ristique de votre mod√®le
}
user_input_df = pd.DataFrame(user_input_data)

st.write("---")
# Bouton pour d√©clencher la pr√©diction simul√©e
if st.button("üöÄ Faire la pr√©diction simul√©e"):
    try:
        # Assurez-vous que les colonnes de user_input_df correspondent √† celles attendues par le mod√®le
        # Cela est crucial. Si les colonnes ne sont pas les m√™mes ou ne sont pas dans le bon ordre,
        # la pr√©diction √©chouera ou sera incorrecte.
        # Id√©alement, vous devriez recharger les noms des colonnes du X_historical si disponible
        # ou utiliser les noms de colonnes sp√©cifiques de votre mod√®le.
        # Pour cet exemple, nous supposons que user_input_df a d√©j√† les bonnes colonnes dans le bon ordre.

        simulated_prediction = model.predict(user_input_df)
        st.success("‚úÖ Pr√©diction simul√©e r√©ussie !")
        st.markdown(f"### Pr√©diction AQI simul√©e :")
        st.markdown(f"<h1 style='text-align: center; color: #FFD700;'>{simulated_prediction[0]:.2f}</h1>", unsafe_allow_html=True)
        st.info("Ceci est une pr√©diction bas√©e sur les param√®tres que vous avez d√©finis.")
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la pr√©diction simul√©e. Veuillez v√©rifier que les param√®tres du panneau lat√©ral sont corrects et correspondent aux attentes de votre mod√®le. D√©tails de l'erreur : {e}")

st.markdown("---")
st.markdown("üåê Application d√©velopp√©e pour l'analyse de la qualit√© de l'air √† Marseille.")
st.markdown("Pour toute question, contactez le support.")
